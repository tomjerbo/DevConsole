//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.7.0
//     from Assets/DevConsole/InputSystem/DevConsoleInputs.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @DevConsoleInputs: IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @DevConsoleInputs()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""DevConsoleInputs"",
    ""maps"": [
        {
            ""name"": ""DevConsole"",
            ""id"": ""8f62939e-8235-4c9b-add6-27d670bafc6b"",
            ""actions"": [
                {
                    ""name"": ""ToggleConsole"",
                    ""type"": ""Button"",
                    ""id"": ""aa3e5165-0817-48bf-8197-a02c73a4221a"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""NavigateUp"",
                    ""type"": ""Button"",
                    ""id"": ""597864b9-34ca-4d5c-85ac-594684a1846b"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""NavigateDown"",
                    ""type"": ""Button"",
                    ""id"": ""942517e1-1427-4549-8255-4cd5c68da6de"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""4f427582-1600-474a-9f14-c329be534746"",
                    ""path"": ""<Keyboard>/backquote"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""ToggleConsole"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""9a7cc833-1bad-4801-a5d2-e92163187a6a"",
                    ""path"": ""<Keyboard>/upArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""NavigateUp"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""d47586a3-02e8-43c7-bd3c-4955d28bc0fb"",
                    ""path"": ""<Keyboard>/downArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""NavigateDown"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
        // DevConsole
        m_DevConsole = asset.FindActionMap("DevConsole", throwIfNotFound: true);
        m_DevConsole_ToggleConsole = m_DevConsole.FindAction("ToggleConsole", throwIfNotFound: true);
        m_DevConsole_NavigateUp = m_DevConsole.FindAction("NavigateUp", throwIfNotFound: true);
        m_DevConsole_NavigateDown = m_DevConsole.FindAction("NavigateDown", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }

    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }

    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // DevConsole
    private readonly InputActionMap m_DevConsole;
    private List<IDevConsoleActions> m_DevConsoleActionsCallbackInterfaces = new List<IDevConsoleActions>();
    private readonly InputAction m_DevConsole_ToggleConsole;
    private readonly InputAction m_DevConsole_NavigateUp;
    private readonly InputAction m_DevConsole_NavigateDown;
    public struct DevConsoleActions
    {
        private @DevConsoleInputs m_Wrapper;
        public DevConsoleActions(@DevConsoleInputs wrapper) { m_Wrapper = wrapper; }
        public InputAction @ToggleConsole => m_Wrapper.m_DevConsole_ToggleConsole;
        public InputAction @NavigateUp => m_Wrapper.m_DevConsole_NavigateUp;
        public InputAction @NavigateDown => m_Wrapper.m_DevConsole_NavigateDown;
        public InputActionMap Get() { return m_Wrapper.m_DevConsole; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(DevConsoleActions set) { return set.Get(); }
        public void AddCallbacks(IDevConsoleActions instance)
        {
            if (instance == null || m_Wrapper.m_DevConsoleActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_DevConsoleActionsCallbackInterfaces.Add(instance);
            @ToggleConsole.started += instance.OnToggleConsole;
            @ToggleConsole.performed += instance.OnToggleConsole;
            @ToggleConsole.canceled += instance.OnToggleConsole;
            @NavigateUp.started += instance.OnNavigateUp;
            @NavigateUp.performed += instance.OnNavigateUp;
            @NavigateUp.canceled += instance.OnNavigateUp;
            @NavigateDown.started += instance.OnNavigateDown;
            @NavigateDown.performed += instance.OnNavigateDown;
            @NavigateDown.canceled += instance.OnNavigateDown;
        }

        private void UnregisterCallbacks(IDevConsoleActions instance)
        {
            @ToggleConsole.started -= instance.OnToggleConsole;
            @ToggleConsole.performed -= instance.OnToggleConsole;
            @ToggleConsole.canceled -= instance.OnToggleConsole;
            @NavigateUp.started -= instance.OnNavigateUp;
            @NavigateUp.performed -= instance.OnNavigateUp;
            @NavigateUp.canceled -= instance.OnNavigateUp;
            @NavigateDown.started -= instance.OnNavigateDown;
            @NavigateDown.performed -= instance.OnNavigateDown;
            @NavigateDown.canceled -= instance.OnNavigateDown;
        }

        public void RemoveCallbacks(IDevConsoleActions instance)
        {
            if (m_Wrapper.m_DevConsoleActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(IDevConsoleActions instance)
        {
            foreach (var item in m_Wrapper.m_DevConsoleActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_DevConsoleActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public DevConsoleActions @DevConsole => new DevConsoleActions(this);
    public interface IDevConsoleActions
    {
        void OnToggleConsole(InputAction.CallbackContext context);
        void OnNavigateUp(InputAction.CallbackContext context);
        void OnNavigateDown(InputAction.CallbackContext context);
    }
}
